(1)
CREATE TABLE Teacher(
    ID CHAR(5) PRIMARY KEY,
    JOB VARCHAR(20) NOT NULL,
    SAL NUMBER(7,2)
);

(2)
INSERT INTO Teacher VALUES
('10001', '教授', 3800),
('10002', '教授', 4100),
('10003', '副教授', 3500),
('10004', '助理教授', 3000);

(3)
CREATE OR REPLACE FUNCTION UPDATE_SAL()
RETURNS TRIGGER AS $$
DECLARE
BEGIN
    IF(NEW.SAL<4000)AND(NEW.JOB='教授')
    THEN NWE.SAL := 4000;
    END IF;
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER INSERT_OR_UPDATE_SAL
BEFORE INSERT OR UPDATE ON Teacher
FOR EACH ROW
EXECUTE PROCEDURE UPDATE_SAL();

(4)
INSERT INTO Teacher VALUES
('10005', '教授', 3999),
('10006', '教授', 4000);

UPDATE Teacher SET SAL=3900 WHERE ID = '10002';

SELECT * FROM Teacher;

(5)
CREATE TABLE Student(
    Sno CHAR(9) PRIMARY KEY,
    Sname VARCHAR(20) UNIQUE,
    Ssex VARCHAR(4),
    Sage SMALLINT,
    Sdept VARCHAR(20)
);
CREATE TABLE Course(
    Cno CHAR(4) PRIMARY KEY,
    Cname VARCHAR(40) NOT NULL,
    Cpno CHAR(4),
    Ccredit SMALLINT,
    FOREIGN KEY(Cpno) REFERENCES Course(Cno)
);
CREATE TABLE SC(
    Sno CHAR(9),
    Cno CHAR(4),
    Grade SMALLINT,
    PRIMARY KEY (Sno,Cno),
    FOREIGN KEY(Sno) REFERENCES Student(Sno),
    FOREIGN KEY(Cno) REFERENCES Course(CNO)
);
INSERT INTO Student VALUES
('201215121','李勇','男',20,'CS'),
('201215122','刘晨','女',19,'CS'),
('201215123','王敏','女',18,'MA'),
('201215124','张立','男',19,'IS');
INSERT INTO Course VALUES
('2','数学',NULL,2),
('6','数据处理',NULL,2),
('4','操作系统','6',3),
('7','PASCAL语言','6',4),
('5','数据结构','7',4),
('1','数据库','5',4),
('3','信息系统','1',4);
INSERT INTO SC VALUES
('201215121','1',92),
('201215121','2',85),
('201215121','3',88),
('201215122','2',90),
('201215122','3',80);

CREATE TABLE SC_U(
    Sno CHAR(9),
    Cno CHAR(4),
    Oldgrade SMALLINT,
    Newgrade SMALLINT,
    FOREIGN KEY(Sno) REFERENCES Student(Sno),
    FOREIGN KEY(Cno) REFERENCES Course(Cno)
);

CREATE OR REPLACE FUNCTION INSERT_SC_U()
RETURNS TRIGGER AS $$
DECLARE
BEGIN
    IF(NEW.Grade >= 1.1*OLD.Grade)
    THEN INSERT INTO SC_U VALUES(OLD.Sno,OLD.Cno,OLD.Grade,NEW.Grade);
    END IF;
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER SC_AFTER_UPDATE
AFTER UPDATE ON SC
FOR EACH ROW
EXECUTE PROCEDURE INSERT_SC_U();

UPDATE SC SET Grade=100 WHERE Sno='201215122' AND Cno='2';
UPDATE SC SET Grade=90 WHERE Sno='201215121' AND Cno='2';
SELECT * FROM SC_U;

(6)
SELECT * FROM PG_TRIGGER;

(7)
DELETE FROM SC_U WHERE Newgrade=100;
UPDATE SC SET Grade=90 WHERE Sno='201215122' AND Cno='2';
UPDATE SC SET Grade=85 WHERE Sno='201215121' AND Cno='2';

ALTER TABLE SC RENAME Grade TO SC_Grade;
UPDATE SC SET SC_Grade=100 WHERE Sno='201215122' AND Cno='2';
UPDATE SC SET SC_Grade=90 WHERE Sno='201215121' AND Cno='2';
SELECT * FROM SC_U;

(8)
DROP TRIGGER INSERT_OR_UPDATE_SAL ON Teacher;
DROP TRIGGER SC_AFTER_UPDATE ON SC;